// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: creadorWebScanner.flex

package edu.cunoc.Nucleo;

import edu.cunoc.Enlace.Respuesta;import java_cup.runtime.*;import java.util.Date;


@SuppressWarnings("fallthrough")
public class CreadorWebLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\5\1\6\3\0\4\7\1\0\1\10"+
    "\1\7\1\11\1\12\1\13\2\14\6\15\1\7\1\0"+
    "\1\16\1\17\1\20\1\0\1\7\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\33\1\51\1\52"+
    "\1\1\1\53\1\0\1\54\1\0\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\33\1\64\2\33\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\4\33\1\0\1\100\55\0\1\33\12\0"+
    "\1\33\4\0\1\33\5\0\27\33\1\0\37\33\1\0"+
    "\u01ca\33\4\0\14\33\16\0\5\33\7\0\1\33\1\0"+
    "\1\33\201\0\5\33\1\0\2\33\2\0\4\33\1\0"+
    "\1\33\6\0\1\33\1\0\3\33\1\0\1\33\1\0"+
    "\24\33\1\0\123\33\1\0\213\33\10\0\246\33\1\0"+
    "\46\33\2\0\1\33\6\0\51\33\107\0\33\33\4\0"+
    "\4\33\55\0\53\33\25\0\12\33\4\0\2\33\1\0"+
    "\143\33\1\0\1\33\17\0\2\33\7\0\17\33\2\0"+
    "\1\33\20\0\1\33\1\0\36\33\35\0\131\33\13\0"+
    "\1\33\16\0\53\33\11\0\2\33\4\0\1\33\5\0"+
    "\26\33\4\0\1\33\11\0\1\33\3\0\1\33\27\0"+
    "\31\33\7\0\13\33\65\0\25\33\1\0\10\33\106\0"+
    "\66\33\3\0\1\33\22\0\1\33\7\0\12\33\4\0"+
    "\12\33\1\0\20\33\4\0\10\33\2\0\2\33\2\0"+
    "\26\33\1\0\7\33\1\0\1\33\3\0\4\33\3\0"+
    "\1\33\20\0\1\33\15\0\2\33\1\0\3\33\4\0"+
    "\14\33\12\0\1\33\10\0\6\33\4\0\2\33\2\0"+
    "\26\33\1\0\7\33\1\0\2\33\1\0\2\33\1\0"+
    "\2\33\37\0\4\33\1\0\1\33\7\0\12\33\2\0"+
    "\3\33\20\0\11\33\1\0\3\33\1\0\26\33\1\0"+
    "\7\33\1\0\2\33\1\0\5\33\3\0\1\33\22\0"+
    "\1\33\17\0\2\33\4\0\12\33\11\0\1\33\13\0"+
    "\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0"+
    "\2\33\1\0\5\33\3\0\1\33\36\0\2\33\1\0"+
    "\3\33\4\0\12\33\1\0\1\33\21\0\1\33\1\0"+
    "\6\33\3\0\3\33\1\0\4\33\3\0\2\33\1\0"+
    "\1\33\1\0\2\33\3\0\2\33\3\0\3\33\3\0"+
    "\14\33\26\0\1\33\25\0\12\33\25\0\10\33\1\0"+
    "\3\33\1\0\27\33\1\0\20\33\3\0\1\33\32\0"+
    "\3\33\5\0\2\33\4\0\12\33\20\0\1\33\4\0"+
    "\10\33\1\0\3\33\1\0\27\33\1\0\12\33\1\0"+
    "\5\33\3\0\1\33\40\0\1\33\1\0\2\33\4\0"+
    "\12\33\1\0\2\33\22\0\10\33\1\0\3\33\1\0"+
    "\51\33\2\0\1\33\20\0\1\33\5\0\3\33\10\0"+
    "\3\33\4\0\12\33\12\0\6\33\5\0\22\33\3\0"+
    "\30\33\1\0\11\33\1\0\1\33\2\0\7\33\37\0"+
    "\12\33\21\0\60\33\1\0\2\33\14\0\7\33\11\0"+
    "\12\33\47\0\2\33\1\0\1\33\1\0\5\33\1\0"+
    "\30\33\1\0\1\33\1\0\12\33\1\0\2\33\11\0"+
    "\1\33\2\0\5\33\1\0\1\33\11\0\12\33\2\0"+
    "\4\33\40\0\1\33\37\0\12\33\26\0\10\33\1\0"+
    "\44\33\33\0\5\33\163\0\53\33\24\0\13\33\6\0"+
    "\6\33\4\0\4\33\3\0\1\33\3\0\2\33\7\0"+
    "\3\33\4\0\15\33\14\0\1\33\1\0\12\33\6\0"+
    "\46\33\1\0\1\33\5\0\1\33\2\0\53\33\1\0"+
    "\115\33\1\0\4\33\2\0\7\33\1\0\1\33\1\0"+
    "\4\33\2\0\51\33\1\0\4\33\2\0\41\33\1\0"+
    "\4\33\2\0\7\33\1\0\1\33\1\0\4\33\2\0"+
    "\17\33\1\0\71\33\1\0\4\33\2\0\103\33\45\0"+
    "\20\33\20\0\126\33\2\0\6\33\3\0\u016c\33\2\0"+
    "\21\33\1\0\32\33\5\0\113\33\6\0\10\33\7\0"+
    "\15\33\1\0\4\33\16\0\22\33\16\0\22\33\16\0"+
    "\15\33\1\0\3\33\17\0\64\33\43\0\1\33\4\0"+
    "\1\33\3\0\12\33\46\0\12\33\6\0\131\33\7\0"+
    "\5\33\2\0\42\33\1\0\1\33\5\0\106\33\12\0"+
    "\37\33\47\0\50\33\2\0\5\33\13\0\54\33\4\0"+
    "\32\33\6\0\12\33\46\0\27\33\11\0\65\33\53\0"+
    "\12\33\6\0\12\33\15\0\1\33\135\0\57\33\21\0"+
    "\7\33\4\0\12\33\51\0\36\33\15\0\70\33\32\0"+
    "\44\33\34\0\12\33\3\0\61\33\2\0\11\33\7\0"+
    "\53\33\2\0\3\33\51\0\4\33\1\0\6\33\1\0"+
    "\2\33\3\0\1\33\5\0\300\33\100\0\26\33\2\0"+
    "\6\33\2\0\46\33\2\0\6\33\2\0\10\33\1\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\37\33\2\0"+
    "\65\33\1\0\7\33\1\0\1\33\3\0\3\33\1\0"+
    "\7\33\3\0\4\33\2\0\6\33\4\0\15\33\5\0"+
    "\3\33\1\0\7\33\164\0\1\33\15\0\1\33\20\0"+
    "\15\33\145\0\1\33\4\0\1\33\2\0\12\33\1\0"+
    "\1\33\3\0\5\33\6\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\0\4\33\1\0\13\33\2\0\4\33\5\0"+
    "\5\33\4\0\1\33\64\0\2\33\u017b\0\57\33\1\0"+
    "\57\33\1\0\205\33\6\0\4\33\3\0\2\33\14\0"+
    "\46\33\1\0\1\33\5\0\1\33\2\0\70\33\7\0"+
    "\1\33\20\0\27\33\11\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\120\0\1\33\325\0\2\33\52\0"+
    "\5\33\5\0\2\33\4\0\126\33\6\0\3\33\1\0"+
    "\132\33\1\0\4\33\5\0\53\33\1\0\136\33\21\0"+
    "\33\33\65\0\306\33\112\0\360\33\20\0\215\33\103\0"+
    "\56\33\2\0\15\33\3\0\34\33\24\0\57\33\20\0"+
    "\37\33\2\0\106\33\61\0\11\33\2\0\147\33\2\0"+
    "\65\33\2\0\5\33\60\0\13\33\1\0\3\33\1\0"+
    "\4\33\1\0\27\33\35\0\64\33\16\0\62\33\34\0"+
    "\12\33\30\0\6\33\3\0\1\33\1\0\2\33\1\0"+
    "\46\33\12\0\27\33\31\0\35\33\7\0\57\33\34\0"+
    "\13\33\6\0\5\33\1\0\31\33\1\0\51\33\27\0"+
    "\3\33\1\0\10\33\4\0\12\33\6\0\27\33\3\0"+
    "\1\33\3\0\62\33\1\0\1\33\3\0\2\33\2\0"+
    "\5\33\2\0\1\33\1\0\1\33\30\0\3\33\2\0"+
    "\13\33\7\0\3\33\14\0\6\33\2\0\6\33\2\0"+
    "\6\33\11\0\7\33\1\0\7\33\1\0\53\33\1\0"+
    "\14\33\10\0\163\33\15\0\12\33\6\0\244\33\14\0"+
    "\27\33\4\0\61\33\4\0\156\33\2\0\152\33\46\0"+
    "\7\33\14\0\5\33\5\0\1\33\1\0\12\33\1\0"+
    "\15\33\1\0\5\33\1\0\1\33\1\0\2\33\1\0"+
    "\2\33\1\0\154\33\41\0\153\33\22\0\100\33\2\0"+
    "\66\33\50\0\14\33\164\0\5\33\1\0\207\33\23\0"+
    "\12\33\7\0\32\33\6\0\32\33\13\0\131\33\3\0"+
    "\6\33\2\0\6\33\2\0\6\33\2\0\3\33\43\0"+
    "\14\33\1\0\32\33\1\0\23\33\1\0\2\33\1\0"+
    "\17\33\2\0\16\33\42\0\173\33\205\0\35\33\3\0"+
    "\61\33\57\0\40\33\15\0\24\33\1\0\10\33\6\0"+
    "\46\33\12\0\36\33\2\0\44\33\4\0\10\33\60\0"+
    "\236\33\2\0\12\33\6\0\44\33\4\0\44\33\4\0"+
    "\50\33\10\0\64\33\234\0\67\33\11\0\26\33\12\0"+
    "\10\33\230\0\6\33\2\0\1\33\1\0\54\33\1\0"+
    "\2\33\3\0\1\33\2\0\27\33\12\0\27\33\11\0"+
    "\37\33\101\0\23\33\1\0\2\33\12\0\26\33\12\0"+
    "\32\33\106\0\70\33\6\0\2\33\100\0\1\33\17\0"+
    "\4\33\1\0\3\33\1\0\35\33\52\0\35\33\3\0"+
    "\35\33\43\0\10\33\1\0\34\33\33\0\66\33\12\0"+
    "\26\33\12\0\23\33\15\0\22\33\156\0\111\33\67\0"+
    "\63\33\15\0\63\33\15\0\44\33\14\0\12\33\306\0"+
    "\35\33\12\0\1\33\10\0\26\33\232\0\27\33\14\0"+
    "\65\33\56\0\12\33\23\0\55\33\40\0\31\33\7\0"+
    "\12\33\11\0\44\33\17\0\12\33\4\0\1\33\13\0"+
    "\43\33\3\0\1\33\14\0\60\33\16\0\4\33\13\0"+
    "\13\33\1\0\1\33\43\0\22\33\1\0\31\33\124\0"+
    "\7\33\1\0\1\33\1\0\4\33\1\0\17\33\1\0"+
    "\12\33\7\0\57\33\21\0\12\33\13\0\10\33\2\0"+
    "\2\33\2\0\26\33\1\0\7\33\1\0\2\33\1\0"+
    "\5\33\3\0\1\33\22\0\1\33\14\0\5\33\236\0"+
    "\65\33\22\0\4\33\5\0\12\33\5\0\1\33\40\0"+
    "\60\33\24\0\2\33\1\0\1\33\10\0\12\33\246\0"+
    "\57\33\51\0\4\33\44\0\60\33\24\0\1\33\13\0"+
    "\12\33\46\0\53\33\15\0\1\33\7\0\12\33\66\0"+
    "\33\33\25\0\12\33\306\0\54\33\164\0\112\33\25\0"+
    "\1\33\240\0\10\33\2\0\47\33\20\0\1\33\1\0"+
    "\1\33\34\0\1\33\12\0\50\33\7\0\1\33\25\0"+
    "\1\33\13\0\56\33\23\0\1\33\42\0\71\33\7\0"+
    "\11\33\1\0\45\33\21\0\1\33\17\0\12\33\30\0"+
    "\36\33\160\0\7\33\1\0\2\33\1\0\46\33\25\0"+
    "\1\33\11\0\12\33\6\0\6\33\1\0\2\33\1\0"+
    "\40\33\16\0\1\33\7\0\12\33\u0136\0\23\33\15\0"+
    "\232\33\346\0\304\33\274\0\57\33\321\0\107\33\271\0"+
    "\71\33\7\0\37\33\1\0\12\33\146\0\36\33\22\0"+
    "\60\33\20\0\4\33\14\0\12\33\11\0\25\33\5\0"+
    "\23\33\260\0\100\33\200\0\113\33\5\0\1\33\102\0"+
    "\15\33\100\0\2\33\1\0\1\33\34\0\370\33\10\0"+
    "\363\33\15\0\37\33\61\0\3\33\21\0\4\33\10\0"+
    "\u018c\33\4\0\153\33\5\0\15\33\3\0\11\33\7\0"+
    "\12\33\146\0\125\33\1\0\107\33\1\0\2\33\2\0"+
    "\1\33\2\0\2\33\2\0\4\33\1\0\14\33\1\0"+
    "\1\33\1\0\7\33\1\0\101\33\1\0\4\33\2\0"+
    "\10\33\1\0\7\33\1\0\34\33\1\0\4\33\1\0"+
    "\5\33\1\0\1\33\3\0\7\33\1\0\u0154\33\2\0"+
    "\31\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0"+
    "\37\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0"+
    "\37\33\1\0\31\33\1\0\10\33\2\0\137\33\12\0"+
    "\7\33\2\0\12\33\4\0\1\33\u0171\0\54\33\4\0"+
    "\12\33\6\0\305\33\73\0\104\33\7\0\1\33\4\0"+
    "\12\33\246\0\4\33\1\0\33\33\1\0\2\33\1\0"+
    "\1\33\2\0\1\33\1\0\12\33\1\0\4\33\1\0"+
    "\1\33\1\0\1\33\6\0\1\33\4\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\0\3\33\1\0\2\33\1\0"+
    "\1\33\2\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\0\2\33\1\0\1\33\2\0"+
    "\4\33\1\0\7\33\1\0\4\33\1\0\4\33\1\0"+
    "\1\33\1\0\12\33\1\0\21\33\5\0\3\33\1\0"+
    "\5\33\1\0\21\33\104\0\327\33\51\0\65\33\13\0"+
    "\336\33\2\0\u0182\33\16\0\u0131\33\37\0\36\33\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\2\4\1\5"+
    "\2\6\1\7\1\10\1\11\20\4\1\12\1\13\6\4"+
    "\1\14\1\4\2\15\1\4\1\6\14\4\1\16\20\4"+
    "\2\0\2\4\1\6\36\4\1\0\2\4\1\6\20\4"+
    "\1\17\16\4\1\0\2\4\1\6\4\4\1\20\3\4"+
    "\1\21\1\22\13\4\1\23\3\4\1\24\1\25\2\4"+
    "\1\26\1\27\1\30\2\4\1\31\2\4\1\32\6\4"+
    "\1\33\3\4\1\34\2\4\1\35\1\36\2\4\1\37"+
    "\1\4\1\40\6\4\1\41\1\42\11\4\1\43\2\4"+
    "\1\44\2\4\1\45\3\4\1\46\14\4\1\47\3\4"+
    "\1\50\2\4\1\51\4\4\1\52\2\4\1\53\1\4"+
    "\1\54\5\4\1\55\3\4\1\56\26\4\1\57\5\4"+
    "\1\60\13\4\1\61\14\4\1\62\4\4\1\63\2\4"+
    "\1\64\1\65\2\4\1\66\3\4\1\67\1\70\4\4"+
    "\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\101\0\303\0\u0104\0\u0145"+
    "\0\u0186\0\101\0\u01c7\0\u0208\0\101\0\101\0\101\0\u0249"+
    "\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451"+
    "\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\101\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\101"+
    "\0\u0820\0\u0104\0\u0186\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0145\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34"+
    "\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0659\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b"+
    "\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923"+
    "\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33"+
    "\0\u1d74\0\u0145\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102"+
    "\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a"+
    "\0\u0145\0\u234b\0\u238c\0\u23cd\0\u0145\0\u0145\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u0145\0\u26d9\0\u271a\0\u275b\0\u0145\0\u0145\0\u279c"+
    "\0\u27dd\0\u0145\0\u0145\0\101\0\u281e\0\u285f\0\u28a0\0\u28e1"+
    "\0\u2922\0\u0145\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8"+
    "\0\u0145\0\u2ae9\0\u2b2a\0\u2b6b\0\u0145\0\u2bac\0\u2bed\0\u0145"+
    "\0\u0145\0\u2c2e\0\u2c6f\0\u0145\0\u2cb0\0\u0145\0\u2cf1\0\u2d32"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u0145\0\u0145\0\u2e77\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u0145"+
    "\0\u30c0\0\u3101\0\u0145\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246"+
    "\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e"+
    "\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u0145\0\u3615"+
    "\0\u3656\0\u3697\0\u0145\0\u36d8\0\u3719\0\u0145\0\u375a\0\u379b"+
    "\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u0145\0\u3921\0\u0145"+
    "\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u0145\0\u3aa7\0\u3ae8"+
    "\0\u3b29\0\u0145\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf"+
    "\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7"+
    "\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf"+
    "\0\u0145\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u0145\0\u4245"+
    "\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d"+
    "\0\u448e\0\u44cf\0\u0145\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614"+
    "\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u0145"+
    "\0\u481c\0\u485d\0\u489e\0\u48df\0\u0145\0\u4920\0\u4961\0\u0145"+
    "\0\u0145\0\u49a2\0\u49e3\0\u0145\0\u4a24\0\u4a65\0\u4aa6\0\u0145"+
    "\0\u0145\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u0145\0\u0145";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\3\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\10\1\26\1\27\2\10"+
    "\1\30\1\31\1\32\1\33\2\10\1\34\1\35\1\36"+
    "\1\37\3\10\1\40\1\41\1\11\1\42\3\10\1\24"+
    "\2\10\1\43\1\10\1\44\1\45\1\10\1\46\3\10"+
    "\1\47\1\10\1\37\1\50\103\0\1\3\103\0\1\10"+
    "\1\0\2\10\1\0\4\51\3\0\6\51\23\10\2\0"+
    "\1\10\6\51\15\10\7\0\1\52\1\0\1\52\1\0"+
    "\4\52\3\0\31\52\2\0\24\52\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\31\10\2\0\24\10\6\0"+
    "\1\10\1\52\1\10\1\53\1\0\4\53\3\0\31\53"+
    "\2\0\24\53\6\0\1\10\1\0\2\10\1\0\4\54"+
    "\3\0\31\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\55\3\0\31\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\2\10\1\56\3\10"+
    "\1\57\4\10\1\60\1\10\1\61\5\10\1\62\5\10"+
    "\2\0\3\10\1\56\15\10\1\62\2\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\16\10\1\63\12\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\64\6\10\1\65\2\10\1\66\12\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\67\24\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\23\10\1\70\5\10"+
    "\2\0\21\10\1\70\2\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\4\10\1\71\24\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\3\10"+
    "\1\72\10\10\1\73\13\10\1\74\2\0\12\10\1\73"+
    "\11\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\24\10\1\75\4\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\4\10\1\76\11\10\1\77"+
    "\12\10\2\0\5\10\1\76\16\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\16\10\1\100\5\10\1\101"+
    "\4\10\2\0\14\10\1\100\7\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\21\10\1\102\7\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\1\103\30\10\2\0\1\10\1\104\22\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\10\10\1\105\20\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\106\3\10\1\107\20\10\2\0\10\10"+
    "\1\107\13\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\22\10\1\110\6\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\1\111\7\10\1\112"+
    "\20\10\2\0\1\10\1\111\6\10\1\112\13\10\2\0"+
    "\3\113\1\0\1\114\1\0\2\114\1\0\4\114\3\0"+
    "\31\114\2\0\24\114\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\2\10\1\56\20\10\1\62\5\10\2\0"+
    "\3\10\1\56\15\10\1\62\2\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\14\10\1\73\14\10\2\0"+
    "\12\10\1\73\11\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\4\10\1\76\24\10\2\0\5\10\1\76"+
    "\16\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\16\10\1\100\12\10\2\0\14\10\1\100\7\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\1\104\30\10"+
    "\2\0\1\10\1\104\22\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\10\10\1\107\20\10\2\0\10\10"+
    "\1\107\13\10\6\0\1\10\1\0\2\10\1\0\4\115"+
    "\3\0\6\115\23\10\2\0\1\10\6\115\15\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\116\3\0\31\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\117\3\0"+
    "\31\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\2\10\1\120\26\10\2\0\3\10\1\120"+
    "\20\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\21\10\1\121\7\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\10\10\1\122\12\10\1\123"+
    "\5\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\2\10\1\124\26\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\21\10\1\125"+
    "\7\10\2\0\17\10\1\125\4\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\21\10\1\126\7\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\15\10\1\127\13\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\1\130\30\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\13\10"+
    "\1\131\15\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\21\10\1\132\7\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\10\10"+
    "\1\133\20\10\2\0\10\10\1\133\13\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\2\10\1\134\26\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\1\135\30\10\2\0\1\10\1\135\22\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\20\10\1\136"+
    "\10\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\22\10\1\137\6\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\15\10\1\140"+
    "\13\10\2\0\13\10\1\140\10\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\3\10\1\141\25\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\14\10\1\142\14\10\2\0\12\10\1\142\11\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\4\10\1\143"+
    "\24\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\10\10\1\144\20\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\3\10\1\145"+
    "\2\10\1\146\12\10\1\147\7\10\2\0\17\10\1\147"+
    "\4\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\21\10\1\147\7\10\2\0\17\10\1\147\4\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\23\10\1\150"+
    "\5\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\27\10\1\151\1\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\23\10\1\152"+
    "\5\10\2\0\21\10\1\152\2\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\24\10\1\153\4\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\13\10\1\154\15\10\2\0\11\10\1\154\12\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\3\10\1\155"+
    "\25\10\2\0\4\10\1\155\17\10\2\0\3\156\1\0"+
    "\1\114\1\0\2\114\1\0\4\114\3\0\31\114\2\0"+
    "\6\114\1\156\4\114\1\156\3\114\1\156\1\114\1\156"+
    "\2\114\6\0\1\10\1\0\2\10\1\0\4\157\3\0"+
    "\6\157\23\10\2\0\1\10\6\157\15\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\160\3\0\31\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\161\3\0\31\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\10\10\1\162\20\10\2\0\10\10\1\162\13\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\4\10"+
    "\1\163\24\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\15\10\1\164\13\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\24\10"+
    "\1\165\4\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\7\10\1\166\21\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\10\10"+
    "\1\167\20\10\2\0\10\10\1\167\13\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\21\10\1\170\7\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\23\10\1\171\5\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\22\10\1\172\6\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\16\10\1\173\12\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\4\10\1\174\24\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\20\10\1\175\10\10\2\0\16\10\1\175\5\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\7\10"+
    "\1\176\21\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\6\10\1\177\22\10\2\0\7\10"+
    "\1\177\14\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\24\10\1\200\4\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\23\10\1\201\5\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\24\10\1\202\4\10\2\0\22\10\1\202\1\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\10\10"+
    "\1\203\20\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\10\1\204\27\10\2\0\2\10"+
    "\1\204\21\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\25\10\1\205\3\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\6\10\1\206\22\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\21\10\1\207\7\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\10\10\1\210\20\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\1\211\20\10\1\212\7\10\2\0\1\10\1\211"+
    "\15\10\1\212\4\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\10\10\1\213\20\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\23\10\1\214"+
    "\5\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\24\10\1\215\4\10\2\0\22\10\1\215"+
    "\1\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\1\216\30\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\16\10\1\217\12\10\2\0\14\10"+
    "\1\217\7\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\220\24\10\2\0\5\10\1\220\16\10"+
    "\2\0\3\156\1\0\1\221\1\0\2\221\1\0\4\221"+
    "\3\0\31\221\2\0\24\221\6\0\1\10\1\0\2\10"+
    "\1\0\4\222\3\0\6\222\23\10\2\0\1\10\6\222"+
    "\15\10\6\0\1\10\1\0\1\10\1\223\1\0\4\10"+
    "\3\0\31\10\2\0\24\10\6\0\1\10\1\0\1\10"+
    "\1\223\1\0\4\224\3\0\31\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\16\10\1\225"+
    "\12\10\2\0\14\10\1\225\7\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\6\10\1\226\22\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\4\10\1\227\24\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\21\10\1\230\7\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\16\10\1\231\12\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\1\10\1\232\27\10\2\0"+
    "\2\10\1\232\21\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\1\233\30\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\21\10\1\234\7\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\235\24\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\21\10\1\236\7\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\2\10\1\237\26\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\24\10\1\240\4\10"+
    "\2\0\22\10\1\240\1\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\241\30\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\4\10\1\242"+
    "\24\10\2\0\5\10\1\242\16\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\10\10\1\243\20\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\10\10\1\244\20\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\5\10\1\245\23\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\21\10\1\246\7\10\2\0\17\10\1\246\4\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\1\247\15\10"+
    "\1\250\12\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\4\10\1\251\24\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\4\10"+
    "\1\252\24\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\15\10\1\253\13\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\14\10"+
    "\1\254\14\10\2\0\12\10\1\254\11\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\1\255\30\10\2\0"+
    "\1\10\1\255\22\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\16\10\1\256\12\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\16\10\1\257"+
    "\12\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\13\10\1\260\15\10\2\0\11\10\1\260"+
    "\12\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\21\10\1\261\7\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\21\10\1\262\7\10\2\0"+
    "\17\10\1\262\4\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\16\10\1\263\12\10\2\0\14\10\1\263"+
    "\7\10\2\0\3\221\1\0\1\221\1\0\2\221\1\0"+
    "\4\221\3\0\31\221\1\0\1\264\24\221\6\0\1\10"+
    "\1\0\2\10\1\0\4\265\3\0\6\265\23\10\2\0"+
    "\1\10\6\265\15\10\6\0\1\10\1\0\2\10\1\0"+
    "\2\266\2\10\3\0\31\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\224\3\0\31\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\15\10"+
    "\1\267\13\10\2\0\13\10\1\267\10\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\1\270\30\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\1\271\30\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\272\30\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\24\10\1\273"+
    "\4\10\2\0\22\10\1\273\1\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\21\10\1\274\7\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\1\275\30\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\7\10\1\276\21\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\4\10"+
    "\1\277\24\10\2\0\5\10\1\277\16\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\31\10\2\0\1\300"+
    "\23\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\15\10\1\301\13\10\2\0\13\10\1\301\10\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\4\10\1\302"+
    "\24\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\5\10\1\303\23\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\10\10\1\304"+
    "\20\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\4\10\1\305\24\10\2\0\5\10\1\305"+
    "\16\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\31\10\2\0\1\306\23\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\31\10\2\0\1\307\23\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\15\10\1\310"+
    "\13\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\1\311\30\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\4\10\1\312\24\10"+
    "\2\0\5\10\1\312\16\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\5\10\1\313\23\10\2\0\6\10"+
    "\1\313\15\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\16\10\1\314\12\10\2\0\14\10\1\314\7\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\10\10"+
    "\1\315\20\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\316\3\0\6\316\23\10\2\0\1\10\6\316"+
    "\15\10\6\0\1\10\1\0\2\10\1\0\4\317\3\0"+
    "\31\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\4\10\1\320\24\10\2\0\5\10\1\320"+
    "\16\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\21\10\1\321\7\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\2\10\1\322\26\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\23\10\1\323\5\10\2\0\21\10\1\323\2\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\31\10\2\0"+
    "\1\324\23\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\21\10\1\325\7\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\1\326\30\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\23\10\1\327\5\10\2\0\21\10\1\327\2\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\2\10\1\330"+
    "\11\10\1\331\14\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\21\10\1\332\7\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\10\10\1\333\20\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\2\10\1\334\26\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\17\10\1\335\11\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\22\10\1\336\6\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\23\10\1\337\5\10\2\0\21\10\1\337\2\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\16\10\1\340"+
    "\12\10\2\0\14\10\1\340\7\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\16\10\1\341\12\10\2\0"+
    "\24\10\6\0\1\10\1\0\1\10\1\342\1\0\4\10"+
    "\3\0\31\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\22\10\1\343\6\10\2\0\20\10"+
    "\1\343\3\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\31\10\2\0\1\344\23\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\10\10\1\345\20\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\16\10\1\346\12\10\2\0\14\10\1\346\7\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\2\10\1\347"+
    "\14\10\1\350\2\10\1\351\6\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\1\352\30\10"+
    "\2\0\1\10\1\352\22\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\21\10\1\353\7\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\16\10"+
    "\1\354\12\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\3\10\1\355\25\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\2\10"+
    "\1\356\26\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\357\30\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\1\360\30\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\10\10\1\361\20\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\21\10\1\362\7\10"+
    "\2\0\17\10\1\362\4\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\31\10\2\0\1\363\23\10\6\0"+
    "\1\10\1\0\2\10\1\0\3\364\1\10\3\0\31\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\2\10\1\365\26\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\16\10\1\366\12\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\22\10\1\367\6\10\2\0\20\10\1\367\3\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\16\10"+
    "\1\370\12\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\371\30\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\10\10\1\372"+
    "\20\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\22\10\1\373\6\10\2\0\20\10\1\373"+
    "\3\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\4\10\1\374\24\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\3\10\1\375\25\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\1\376\30\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\377\30\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\21\10\1\u0100"+
    "\7\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\6\10\1\u0101\22\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\23\10\1\u0102"+
    "\5\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\16\10\1\u0103\12\10\2\0\14\10\1\u0103"+
    "\7\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\2\10\1\u0104\11\10\1\u0105\14\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\u0106\3\0\31\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\16\10\1\u0107\12\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\15\10\1\u0108\13\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\14\10\1\u0109\14\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\6\10\1\u010a\22\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\23\10\1\u010b\5\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\1\u010c\30\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\10\10"+
    "\1\u010d\20\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\21\10\1\u010e\7\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\31\10"+
    "\2\0\1\u010f\23\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\10\10\1\u0110\20\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\10\10\1\u0111"+
    "\20\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\22\10\1\u0112\6\10\2\0\20\10\1\u0112"+
    "\3\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\21\10\1\u0113\7\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\16\10\1\u0114\12\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\14\10\1\u0115\14\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\17\10\1\u0116\11\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\10\10\1\u0117\20\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\10\10\1\u0118\20\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\2\10\1\u0119\26\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\5\10\1\u011a\23\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\2\10\1\u011b\14\10\1\u011c\11\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\15\10\1\u011d"+
    "\13\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\16\10\1\u011e\12\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\4\10\1\u011f"+
    "\24\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\3\10\1\u0120\25\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\17\10\1\u0121"+
    "\11\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\16\10\1\u0122\12\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\15\10\1\u0123"+
    "\13\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\16\10\1\u0124\12\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\10\10\1\u0125"+
    "\20\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\10\10\1\u0126\20\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\16\10\1\u0127"+
    "\12\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\1\u0128\30\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\1\u0129\30\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\31\10\2\0\1\u012a\23\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\u012b\30\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\10\10\1\u012c"+
    "\20\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\16\10\1\u012d\12\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\15\10\1\u012e"+
    "\13\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\1\u012f\30\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\31\10\2\0\1\u0130"+
    "\23\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\16\10\1\u0131\12\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\2\10\1\u0132\26\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\14\10\1\u0133\14\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\6\10\1\u0134\22\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\26\10\1\u0135\2\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\2\10\1\u0136\26\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\5\10\1\u0137\23\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\15\10\1\u0138\13\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\4\10\1\u0139\24\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\26\10\1\u013a\2\10\2\0"+
    "\24\10\6\0\1\10\1\0\2\10\1\0\4\10\3\0"+
    "\15\10\1\u013b\13\10\2\0\24\10\6\0\1\10\1\0"+
    "\2\10\1\0\4\10\3\0\1\u013c\30\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\17\10"+
    "\1\u013d\11\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\10\10\1\u013e\20\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\4\10"+
    "\1\u013f\24\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\10\10\1\u0140\20\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\10\10"+
    "\1\u0141\20\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\4\10\1\u0142\24\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\15\10"+
    "\1\u0143\13\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\4\10\1\u0144\24\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\2\10"+
    "\1\u0145\26\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\16\10\1\u0146\12\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\15\10"+
    "\1\u0147\13\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\10\1\u0148\27\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\16\10"+
    "\1\u0149\12\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\2\10\1\u014a\26\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\15\10"+
    "\1\u014b\13\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\23\10\1\u014c\5\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\1\10"+
    "\1\u014d\27\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\10\10\1\u014e\20\10\2\0\24\10"+
    "\6\0\1\10\1\0\2\10\1\0\4\10\3\0\15\10"+
    "\1\u014f\13\10\2\0\24\10\6\0\1\10\1\0\2\10"+
    "\1\0\4\10\3\0\1\u0150\30\10\2\0\24\10\6\0"+
    "\1\10\1\0\2\10\1\0\4\10\3\0\15\10\1\u0151"+
    "\13\10\2\0\24\10\6\0\1\10\1\0\2\10\1\0"+
    "\4\10\3\0\1\u0152\30\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\23\10\1\u0153\5\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\u0154\24\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\16\10\1\u0155\12\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\u0156\24\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\2\10\1\u0157\26\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\u0158\24\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\15\10\1\u0159\13\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\15\10\1\u015a\13\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\10\10\1\u015b\20\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\23\10\1\u015c\5\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\16\10\1\u015d\12\10"+
    "\2\0\24\10\6\0\1\10\1\0\2\10\1\0\4\10"+
    "\3\0\4\10\1\u015e\24\10\2\0\24\10\6\0\1\10"+
    "\1\0\2\10\1\0\4\10\3\0\15\10\1\u015f\13\10"+
    "\2\0\24\10\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19435];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\4\1\1\11\2\1\3\11"+
    "\21\1\1\11\6\1\1\11\42\1\2\0\41\1\1\0"+
    "\42\1\1\0\42\1\1\11\253\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Respuesta respuesta;


       private Symbol symbol(int type) {
           return new Symbol(type, yyline+1, yycolumn+1);
       }

        private Symbol symbol(int type, Object value) {
            return new Symbol(type, yyline+1, yycolumn+1, value);
        }

        private void error(String message) {
           if (respuesta==null){
               respuesta = new Respuesta();
           }
           respuesta.addErrorLexico("Error lexico en linea "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
            System.out.println("Error lexico en linea "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
        }

        public Respuesta getRespuesta(){
           return respuesta;
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CreadorWebLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error("Simbolo invalido <"+yytext()+"> en linea "+(yyline+1)+" en columna "+ (yycolumn+1));
            }
          // fall through
          case 59: break;
          case 2:
            { 
            }
          // fall through
          case 60: break;
          case 3:
            { return symbol(sym.COMILLA);
            }
          // fall through
          case 61: break;
          case 4:
            { return symbol(sym.MULTI, new String(yytext()));
            }
          // fall through
          case 62: break;
          case 5:
            { return symbol(sym.DIAGONAL);
            }
          // fall through
          case 63: break;
          case 6:
            { return symbol(sym.ENTERO, new Integer(yytext()));
            }
          // fall through
          case 64: break;
          case 7:
            { return symbol(sym.MENOSQUE);
            }
          // fall through
          case 65: break;
          case 8:
            { return symbol(sym.IGUAL);
            }
          // fall through
          case 66: break;
          case 9:
            { return symbol(sym.MAYORQUE);
            }
          // fall through
          case 67: break;
          case 10:
            { return symbol(sym.COR_OP);
            }
          // fall through
          case 68: break;
          case 11:
            { return symbol(sym.COR_CLO);
            }
          // fall through
          case 69: break;
          case 12:
            { return symbol(sym.BARRA);
            }
          // fall through
          case 70: break;
          case 13:
            { return symbol(sym.ID, new String(yytext()));
            }
          // fall through
          case 71: break;
          case 14:
            { return symbol(sym.PAR_ID);
            }
          // fall through
          case 72: break;
          case 15:
            { return symbol(sym.MENU);
            }
          // fall through
          case 73: break;
          case 16:
            { return symbol(sym.ANCHO);
            }
          // fall through
          case 74: break;
          case 17:
            { return symbol(sym.CLASE);
            }
          // fall through
          case 75: break;
          case 18:
            { return symbol(sym.COLOR);
            }
          // fall through
          case 76: break;
          case 19:
            { return symbol(sym.PADRE);
            }
          // fall through
          case 77: break;
          case 20:
            { return symbol(sym.SITIO);
            }
          // fall through
          case 78: break;
          case 21:
            { return symbol(sym.TEXTO);
            }
          // fall through
          case 79: break;
          case 22:
            { return symbol(sym.VALOR);
            }
          // fall through
          case 80: break;
          case 23:
            { return symbol(sym.VIDEO);
            }
          // fall through
          case 81: break;
          case 24:
            { return symbol(sym.OTRO, new String(yytext()));
            }
          // fall through
          case 82: break;
          case 25:
            { return symbol(sym.ACCION);
            }
          // fall through
          case 83: break;
          case 26:
            { return symbol(sym.ALTURA);
            }
          // fall through
          case 84: break;
          case 27:
            { return symbol(sym.IMAGEN);
            }
          // fall through
          case 85: break;
          case 28:
            { return symbol(sym.NOMBRE);
            }
          // fall through
          case 86: break;
          case 29:
            { return symbol(sym.ORIGEN);
            }
          // fall through
          case 87: break;
          case 30:
            { return symbol(sym.PAGINA);
            }
          // fall through
          case 88: break;
          case 31:
            { return symbol(sym.TITULO_CLASS);
            }
          // fall through
          case 89: break;
          case 32:
            { return symbol(sym.HEXA, new String(yytext()));
            }
          // fall through
          case 90: break;
          case 33:
            { return symbol(sym.CENTRAR);
            }
          // fall through
          case 91: break;
          case 34:
            { return symbol(sym.DERECHA);
            }
          // fall through
          case 92: break;
          case 35:
            { return symbol(sym.PARRAFO);
            }
          // fall through
          case 93: break;
          case 36:
            { return symbol(sym.ACCIONES);
            }
          // fall through
          case 94: break;
          case 37:
            { return symbol(sym.ATRIBUTO);
            }
          // fall through
          case 95: break;
          case 38:
            { return symbol(sym.ETIQUETA);
            }
          // fall through
          case 96: break;
          case 39:
            { return symbol(sym.ATRIBUTOS);
            }
          // fall through
          case 97: break;
          case 40:
            { return symbol(sym.ETIQUETAS_XML);
            }
          // fall through
          case 98: break;
          case 41:
            { return symbol(sym.IZQUIERDA);
            }
          // fall through
          case 99: break;
          case 42:
            { return symbol(sym.PARAMETRO);
            }
          // fall through
          case 100: break;
          case 43:
            { return symbol(sym.FECHA, new String(yytext()));
            }
          // fall through
          case 101: break;
          case 44:
            { return symbol(sym.ALINEACION);
            }
          // fall through
          case 102: break;
          case 45:
            { return symbol(sym.JUSTIFICAR);
            }
          // fall through
          case 103: break;
          case 46:
            { return symbol(sym.PARAMETROS);
            }
          // fall through
          case 104: break;
          case 47:
            { return symbol(sym.NUEVA_PAG);
            }
          // fall through
          case 105: break;
          case 48:
            { return symbol(sym.DEL_PAG);
            }
          // fall through
          case 106: break;
          case 49:
            { return symbol(sym.DATE_CREACION);
            }
          // fall through
          case 107: break;
          case 50:
            { return symbol(sym.NUEVA_WEB);
            }
          // fall through
          case 108: break;
          case 51:
            { return symbol(sym.DEL_WEB);
            }
          // fall through
          case 109: break;
          case 52:
            { return symbol(sym.MOD_PAG);
            }
          // fall through
          case 110: break;
          case 53:
            { return symbol(sym.USER_CREACION);
            }
          // fall through
          case 111: break;
          case 54:
            { return symbol(sym.DEL_COMP);
            }
          // fall through
          case 112: break;
          case 55:
            { return symbol(sym.ADD_COMP);
            }
          // fall through
          case 113: break;
          case 56:
            { return symbol(sym.DATE_MOD);
            }
          // fall through
          case 114: break;
          case 57:
            { return symbol(sym.MOD_COMP);
            }
          // fall through
          case 115: break;
          case 58:
            { return symbol(sym.USER_MOD);
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
